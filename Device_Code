#include <Wire.h>
#include "Adafruit_TCS34725.h"
#include <Adafruit_DPS310.h>

#include "SafeString.h"
#include "BLEPeripheral.h"

//TO DO:
//CHECK DEVICE MANAGER BAUD RATE
//MAKE SURE BLE_ADVERT_MS > DELAY_TIME

//add calibration
//pressure offset
//integrate button
//check 3d print

BLEPeripheral ble;
const size_t MAX_DATA_LEN = 26;
cSF(sfData, MAX_DATA_LEN); // Local name and formatted measurements SafeString will limit data to this length. Excess data is dropped NOT truncated see SafeString docs/tutorials
unsigned short ADVERT_INTERVAL = 750; // default it 500, 750ms gives 13 advert packets in the 10 secs

lp_timer BLE_Timer;
const unsigned long BLE_ADVERT_MS = 20ul * 1000; // advertise for 15sec at 750ms intervals i.e. ~13 advert packets

Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_300MS, TCS34725_GAIN_1X); //initialize light sensor as tcs
Adafruit_DPS310 dps; //address 0x77
Adafruit_DPS310 dps2; //address 0x76

#define vccPin 8
#define buttonPin 11
#define buzzerPin 12
#define DEBUG

lp_timer sleepTimer;
const unsigned long DELAY_TIME = 25000;

#define pressureThreshold 20
#define lightThreshold 50
#define ambientThreshold 200

void turn_off(){
  while (1){
    tcs.setInterrupt(true); //turn off built-in LED
    digitalWrite(buzzerPin, LOW);
  }
}

void setAdvertData(int lux, float diff){
  //update bluetooth --------------------------------------
  sfData = "QI";
  sfData += '_';
  sfData.print(lux); // only one decimal place
  sfData += '*';
  sfData.print(diff,2); // only one decimal place
  sfData += '@';
  
  ble.setAdvertisedName(sfData.c_str());
  
#ifdef DEBUG
  Serial.print("set data to ");
  Serial.println(sfData);
#endif
}



void stopAdvert() {
  ble.end();
#ifdef DEBUG
  Serial.print("stop ble "); Serial.println(millis());
#endif
}



void handleSleepTimer(){
#ifdef DEBUG
  Serial.println("WAKE");
#endif
  
  //init sensor variables
  sensors_event_t temp_event, pressure_event;
  sensors_event_t temp_event2, pressure_event2;
  uint16_t r, g, b, c, colorTemp, lux;

  //pressure sensors  --------------------------------------------------
  
  while (!dps.temperatureAvailable() || !dps.pressureAvailable() || !dps2.temperatureAvailable() || !dps2.pressureAvailable()) {
    return; // wait until there's something to read from *both* sensors
  }

  delay(2500);
  
  //take measurements
  dps.getEvents(&temp_event, &pressure_event);
  dps2.getEvents(&temp_event2, &pressure_event2);
  
#ifdef DEBUG
  Serial.print(pressure_event.pressure);
  Serial.print(" hPa (0x76), "); 

  Serial.print(pressure_event2.pressure);
  Serial.print(" hPa (0x77), "); 

  Serial.print(F("diff = "));//0x77 sensor minus 0x76 sensor
  Serial.print(pressure_event2.pressure - pressure_event.pressure);
  Serial.println(" hPa (0x77-0x76)"); 
#endif

  //light sensors  --------------------------------------------------
  tcs.setInterrupt(true);
  tcs.getRawData(&r, &g, &b, &c);
  lux = tcs.calculateLux(r, g, b); //calculate ambient light

#ifdef DEBUG
  Serial.print("Ambient Lux: "); Serial.println(lux, DEC);
#endif
  
  if (lux < ambientThreshold){
    tcs.setInterrupt(false); //inverted, false = on; true = off
    delay(50);
    tcs.getRawData(&r, &g, &b, &c);
    lux = tcs.calculateLux(r, g, b);
    tcs.setInterrupt(true);

#ifdef DEBUG
    Serial.print("Lux: "); Serial.println(lux, DEC);
#endif
  }
  
  //buzzer --------------------------------------------------
  if ((lux < lightThreshold) || (pressure_event2.pressure - pressure_event.pressure > pressureThreshold)){
    digitalWrite(buzzerPin, HIGH);
    delay(500);
    digitalWrite(buzzerPin, LOW);
  }

  setAdvertData(lux, pressure_event2.pressure - pressure_event.pressure);  // pick up latest values
  delay(500);
  ble.begin();
#ifdef DEBUG
  Serial.print("start ble "); Serial.println(millis());
#endif
  BLE_Timer.startDelay(BLE_ADVERT_MS, stopAdvert); // stop in 15sec


  
}




void setup() {
  // put your setup code here, to run once:

  //init sleep timer -------------------------------------------
  sleepTimer.startTimer(DELAY_TIME, handleSleepTimer);
  
  //init buzzer -------------------------------------------
  pinMode(buzzerPin, OUTPUT_D0H1);
  pinMode(vccPin, OUTPUT_D0H1);
  digitalWrite(vccPin, HIGH);
  
  //init serial ------------------------------------------- 

#ifdef DEBUG
  //Serial.setPins(30, 29);
  Serial.begin(115200); //init serial monitor
  //while (!Serial) delay(10);
  delay(1000);
#endif

  //init tcs ------------------------------------------------------------------
  if (tcs.begin()) { 
    
#ifdef DEBUG
    Serial.println("Found sensor");
#endif

  } else {
    
#ifdef DEBUG
    Serial.println("No TCS34725 found ... check your connections");
#endif

    while (1);
  }

  //init dps(es) --------------------------------------------------------------
  if (! dps.begin_I2C(0x76)) {             // Can pass in I2C address here
    
#ifdef DEBUG
    Serial.println("Failed to find DPS 0x76");
#endif

    while (1) yield();
  }
  if (! dps2.begin_I2C(0x77)) {             // Can pass in I2C address here

#ifdef DEBUG
    Serial.println("Failed to find DPS 0x77");
#endif

    while (1) yield();
  }

#ifdef DEBUG
  Serial.println("BOTH DPS SENSORS OK!");
#endif

  dps.configurePressure(DPS310_64HZ, DPS310_64SAMPLES);
  dps.configureTemperature(DPS310_64HZ, DPS310_64SAMPLES);

  dps2.configurePressure(DPS310_64HZ, DPS310_64SAMPLES);
  dps2.configureTemperature(DPS310_64HZ, DPS310_64SAMPLES);

  //turn_off(); //turn off all leds and buzzer when done (TESTING)

#ifdef DEBUG
  Serial.println();
  /*for (int i = 10; i > 0; i--) {
    Serial.print(' '); Serial.print(i);
    delay(500);
  }*/
  Serial.println();
#endif

  // set advertised name
  ble.setConnectable(false);
  ble.setTxPower(+4);
  ble.setAdvertisingInterval(ADVERT_INTERVAL);

  handleSleepTimer(); // sets name and measurement data
  
  ble.begin();
#ifdef DEBUG
  Serial.println(" BLE started");
  Serial.println("setup() finished");
#endif

}




void loop() {
#ifdef DEBUG
  Serial.println("SLEEP");
  delay(100);
#endif
  sleep(); //sleep while waiting for timer to trigger
}
